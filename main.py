import os
import logging
import sqlite3
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–≤–æ–π —Ç–æ–∫–µ–Ω (–±—É–¥–µ—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# –¢–≤–æ–π ID –∞–¥–º–∏–Ω–∞
ADMIN_IDS = [7871625571]

# –ü–∞–∫–µ—Ç—ã Telegram Stars
STAR_PACKAGES = {
    "50": {"stars": 50, "price": 79},
    "100": {"stars": 100, "price": 156},
    "200": {"stars": 200, "price": 311},
    "300": {"stars": 300, "price": 465},
    "400": {"stars": 400, "price": 620},
    "500": {"stars": 500, "price": 790},
    "600": {"stars": 600, "price": 930},
    "700": {"stars": 700, "price": 1100},
    "800": {"stars": 800, "price": 1259},
    "900": {"stars": 900, "price": 1400},
    "1000": {"stars": 1000, "price": 1600}
}

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        registration_date TEXT
    )
    ''')
    
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS orders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        stars_amount INTEGER,
        price REAL,
        status TEXT DEFAULT 'pending',
        order_date TEXT
    )
    ''')
    
    conn.commit()
    conn.close()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def register_user(user_id, username):
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, registration_date)
    VALUES (?, ?, ?)
    ''', (user_id, username, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def save_order(user_id, stars_amount, price):
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    INSERT INTO orders (user_id, stars_amount, price, order_date)
    VALUES (?, ?, ?, ?)
    ''', (user_id, stars_amount, price, datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
    
    order_id = cursor.lastrowid
    conn.commit()
    conn.close()
    
    return order_id

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    register_user(user.id, user.username)
    
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å Stars", callback_data="buy_stars")],
        [InlineKeyboardButton("üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
         InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω Telegram Stars\n"
        "üíé –°–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã\n"
        "üìû –î–ª—è –∑–∞–∫–∞–∑–∞ –ø–∏—à–∏ @M1rnes\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–∫–µ—Ç—ã Stars
async def show_star_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    text = "üéÅ –í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç Stars:\n\n"
    for stars, info in STAR_PACKAGES.items():
        text += f"‚≠ê {stars} stars - {info['price']}‚ÇΩ\n"
    
    text += "\nüí¨ –î–ª—è –∑–∞–∫–∞–∑–∞ –ø–∏—à–∏ @M1rnes"
    
    keyboard = []
    for stars in STAR_PACKAGES.keys():
        keyboard.append([InlineKeyboardButton(
            f"‚≠ê {stars} stars - {STAR_PACKAGES[stars]['price']}‚ÇΩ", 
            callback_data=f"info_{stars}"
        )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–∫–µ—Ç–µ
async def show_package_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    package = query.data.split('_')[1]
    package_info = STAR_PACKAGES[package]
    
    keyboard = [
        [InlineKeyboardButton("üí¨ –ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ @M1rnes", url="https://t.me/M1rnes")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="buy_stars")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"üéÅ –ü–∞–∫–µ—Ç: ‚≠ê {package_info['stars']} stars\n"
        f"üí∞ –¶–µ–Ω–∞: {package_info['price']}‚ÇΩ\n\n"
        f"üí¨ –î–ª—è –∑–∞–∫–∞–∑–∞:\n"
        f"1. –ù–∞–ø–∏—à–∏ @M1rnes\n"
        f"2. –£–∫–∞–∂–∏ –ø–∞–∫–µ—Ç: {package} stars\n"
        f"3. –û–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ –°–ë–ü\n"
        f"4. –ü–æ–ª—É—á–∏ Stars!\n\n"
        f"‚è±Ô∏è –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞—é –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!",
        reply_markup=reply_markup
    )

# –ú–æ–∏ –∑–∞–∫–∞–∑—ã
async def show_my_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    conn = sqlite3.connect('stars_bot.db')
    cursor = conn.cursor()
    
    cursor.execute('''
    SELECT stars_amount, price, order_date FROM orders 
    WHERE user_id = ? ORDER BY order_date DESC LIMIT 10
    ''', (user_id,))
    
    orders = cursor.fetchall()
    conn.close()
    
    if not orders:
        text = "üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤\n\nüí¨ –ù–∞–ø–∏—à–∏ @M1rnes –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞!"
    else:
        text = "üìã –¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã:\n\n"
        for order in orders:
            stars, price, date = order
            text += f"‚≠ê {stars} stars - {price}‚ÇΩ\nüìÖ {date[:16]}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(text, reply_markup=reply_markup)

# –ü–æ–º–æ—â—å
async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –ø–æ–∫—É–ø–∫–µ Stars\n\n"
        "‚≠ê <b>–ö–∞–∫ –∫—É–ø–∏—Ç—å Stars:</b>\n"
        "1. –í—ã–±–µ—Ä–∏ –ø–∞–∫–µ—Ç Stars\n"
        "2. –ù–∞–∂–º–∏ '–ó–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ @M1rnes'\n"
        "3. –ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–°\n"
        "4. –û–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ –°–ë–ü\n"
        "5. –ü–æ–ª—É—á–∏ Stars!\n\n"
        "üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"
        "‚Ä¢ –°–ë–ü –Ω–∞ –∫–∞—Ä—Ç—É\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ\n\n"
        "‚è∞ <b>–í—Ä–µ–º—è –≤—ã–¥–∞—á–∏:</b>\n"
        "–û–±—ã—á–Ω–æ 5-15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\n\n"
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
        "@M1rnes - –æ—Ç–≤–µ—á–∞—é –±—ã—Å—Ç—Ä–æ!",
        parse_mode='HTML',
        reply_markup=reply_markup
    )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    keyboard = [
        [InlineKeyboardButton("‚≠ê –ö—É–ø–∏—Ç—å Stars", callback_data="buy_stars")],
        [InlineKeyboardButton("üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders"),
         InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        "üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    
    # Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(show_star_packages, pattern="^buy_stars$"))
    application.add_handler(CallbackQueryHandler(show_package_info, pattern="^info_"))
    application.add_handler(CallbackQueryHandler(show_my_orders, pattern="^my_orders$"))
    application.add_handler(CallbackQueryHandler(show_help, pattern="^help$"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="^main_menu$"))
    
    # –ó–∞–ø—É—Å–∫
    application.run_polling()

if __name__ == '__main__':
    main()
